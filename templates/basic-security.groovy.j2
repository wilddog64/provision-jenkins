#!groovy
import jenkins.*
import huson.*
import hudson.security.*
import jenkins.model.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.common.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
import hudson.plugins.sshslaves.*;
import hudson.model.*
import jenkins.model.*
import hudson.security.*

def instance = Jenkins.getInstance()
instance.setNumExecutors(5)
instance.setSlaveAgentPort([55000])
println "--> Checking if security has been set already"

if (!instance.isUseSecurity()) {
    println "--> creating local user 'admin'"

    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    hudsonRealm.createAccount('{{ jenkins_admin_user }}', '{{ jenkins_admin_password }}')
    instance.setSecurityRealm(hudsonRealm)

    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    instance.setAuthorizationStrategy(strategy)
    instance.save()
}

// update user password
user = hudson.model.User.get("admin")
user.setFullName("dreambox admin")
password = hudson.security.HudsonPrivateSecurityRealm.Details.fromPlainPassword("{{ jenkins_admin_password }}")
user.addProperty(password)
user.save()

// load a list of credentials from jenkins and
// search result to see if user jenkins exists
def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
    com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
    jenkins.model.Jenkins.instance,
    null,
    null
)
def found_credential = creds.findResult { it.username == "jenkins" ? it : null }

// create a global credential that bases on SSH key. The private key is created and managed by Ansible
if ( !found_credential ) {
   String keyfile = "{{ jenkins_sshkey_file }}"
   global_domain = Domain.global()
   credential_store = Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
   credential = new BasicSSHUserPrivateKey(
       CredentialsScope.GLOBAL,
       null,
       "jenkins",
       new BasicSSHUserPrivateKey.FileOnMasterPrivateKeySource(keyfile),
       "{{ sshkey_passphrase }}",
       "Ansible Managed SSH credential"
   )
   credential_store.addCredentials(global_domain, credential)
}

// configure git commiter information
def desc = instance.getDescriptor("hudson.plugins.git.GitSCM")
desc.setGlobalConfigName('{{ jenkins_git_commiter_name }}')
desc.setGlobalConfigEmail('{{ jenkins_git_commiter_email }}')
desc.save()

// configure jenkins security
def strategy = new GlobalMatrixAuthorizationStrategy()

strategy.add(Jenkins.READ,'authenticated')
strategy.add(Item.READ,'authenticated')
strategy.add(Item.DISCOVER,'authenticated')
strategy.add(Item.CANCEL,'authenticated')
strategy.add(Item.BUILD, 'authenticated')

// configure admin account security
strategy.add(Jenkins.ADMINISTER, "admin")

// set strategy for a given instance
instance.setAuthorizationStrategy(strategy)

instance.save()

// now we need to configure scm sync plugin
// these are libraries necessary to configure scm-sync plugin
import hudson.plugins.scm_sync_configuration.xstream.migration.DefaultSSCPOJO
import hudson.plugins.scm_sync_configuration.scms.*
import hudson.plugins.scm_sync_configuration.ScmSyncConfigurationPlugin
import net.sf.json.JSONObject
import org.kohsuke.stapler.StaplerRequest
import groovy.mock.interceptor.MockFor
import org.jenkinsci.plugins.*

// create a mock object
def mock = [
  getParameter: {
    key -> switch(key) {
      case 'gitRepositoryUrl':
        return "git@github:{{ jenkins_github_repo }}"
      case 'commitMessagePattern':
        return 'Sync: [message]'
      case 'scm':
        return 'hudson.plugins.scm_sync_configuration.scms.ScmSyncGitSCM'
      default:
        return null
    }
  },
  getParameterValues: {
    return null
  }
] as StaplerRequest

def data = new DefaultSSCPOJO()
data.setScmRepositoryUrl("git@github:{{ jenkins_github_repo }}")
data.setScm(SCM.valueOf(ScmSyncGitSCM.class))
data.setNoUserCommitMessage(false)
data.setDisplayStatus(true)
data.setCommitMessagePattern('Sync: [message]')

def jsonObj = new JSONObject()
jsonObj.put('noUserCommitMessage', 'false')
jsonObj.put('displayStatus', 'true')

def scmSyncPlugin = instance.getPlugin('scm-sync-configuration')

if ( {{ jenkins_sync_repo_empty }} ) {
  scmSyncPlugin.configure(mock, jsonObj)
}
else {
  scmSyncPlugin.loadData(data)
  scmSyncPlugin.business.reloadAllFilesFromScm()
  scmSyncPlugin.business.synchronizeAllConfigs(ScmSyncConfigurationPlugin.AVAILABLE_STRATEGIES)
  instance.save()
}
